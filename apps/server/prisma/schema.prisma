generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// **************************************************************
// User Tables
// **************************************************************

model Profile {
  userId String @id @unique

  firstName String?
  lastName  String?

  darkMode        Boolean           @default(true)
  notifications   NotificationType  @default(ALL)
  UserActivityLog UserActivityLog[]

  articles   Article[]
  highlights Highlight[]
  tags       Tag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("profiles")
}

enum NotificationType {
  ALL
  NONE
}

enum ActivityType {
  VIEW
  SHARE
  CREATE
  DELETE
  UPDATE
  COMMENT
  HIGHLIGHT
  TAG
}

model UserActivityLog {
  id String @id @default(cuid())

  activityType ActivityType

  entityType EntityType
  entityId   Int

  additionalData Json?

  profile   Profile @relation(fields: [profileId], references: [userId])
  profileId String

  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

// **************************************************************
// Entity Tables
// **************************************************************

model Article {
  id String @id @default(cuid())

  title         String
  link          String
  author        String
  content       String
  top_image_url String?
  description   String?
  favorite      Boolean
  word_count    Int

  profile   Profile @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  profileId String

  highlights Highlight[]
  tags       Tag[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([link, profileId], name: "link_profile")
  @@map("articles")
}

// TODO: Add RSS Feed Table
// TODO: Add Email Table

// **************************************************************
// Entity Related Tables
// **************************************************************

// Enum for different data types that can be tagged or highlighted
enum EntityType {
  BOOKMARK
  LOCALFILE
  RSSFEED
  EMAIL
  HIGHLIGHT
}

model Tag {
  id   String @id @default(cuid())
  name String

  profile   Profile @relation(fields: [profileId], references: [userId], onDelete: Cascade)
  profileId String

  articles Article[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique(fields: [name, profileId], name: "name_profile")
  @@map("tags")
}

model Highlight {
  id      String @id @default(cuid())
  content String
  start   Int
  end     Int

  Profile   Profile? @relation(fields: [profileId], references: [userId])
  profileId String?

  articles Article[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("highlights")
}
